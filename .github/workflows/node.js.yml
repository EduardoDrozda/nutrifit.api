# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - run: npm run build --if-present

  lint:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use build artifacts
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci
      - run: npm run lint

  test:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Use build artifacts
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci
      - run: npm run test
  
  test-e2e:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]

    steps:
      - uses: actions/checkout@v3

      - name: Build docker-compose
        uses: adambirds/docker-compose-action@v1.3.0
        with:
          compose-files: ./docker-compose.yml
        
      - name: Start docker-compose
        run: docker-compose up -d
        
      - name: Wait for services
        run: docker-compose exec -T service-name sh -c 'while ! nc -z localhost 3000; do sleep 1; done;'
      
      - name: Run tests
        run: npm run test-e2e
      
      - name: Stop docker-compose
        run: docker-compose down
      
      - name: Remove docker-compose
        run: docker-compose rm -f
      
      - name: Remove docker-compose images
        run: docker rmi $(docker images -q)
      
      - name: Remove docker-compose volumes
        run: docker volume rm $(docker volume ls -q)
      
      - name: Remove docker-compose networks
        run: docker network rm $(docker network ls -q)
      
      - name: Remove docker-compose containers
        run: docker rm $(docker ps -a -q)
    
  deploy:
    needs:
      - build
      - test
      - lint
      - test-e2e
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: xxxxxxxxxxxxxxxx@xx

      - name: Use build artifacts
        uses: xxxxxxxxxxxxx@xx
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci
      - run: npm run build
